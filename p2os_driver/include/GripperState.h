 /* Auto-generated by genmsg_cpp for file /home/rosbuild/hudson/workspace/doc-electric-p2os/doc_stacks/2013-03-01_16-19-23.450784/p2os/p2os_driver/msg/GripperState.msg */
 #ifndef P2OS_DRIVER_MESSAGE_GRIPPERSTATE_H
 #define P2OS_DRIVER_MESSAGE_GRIPPERSTATE_H
 #include <string>
 #include <vector>
 #include <map>
 #include <ostream>
 #include "ros/serialization.h"
 #include "ros/builtin_message_traits.h"
 #include "ros/message_operations.h"
 #include "ros/time.h"
 
 #include "ros/macros.h"
 
 #include "ros/assert.h"
 
 #include "GripState.h"
 #include "LiftState.h"
 
 namespace p2os_driver
 {
 template <class ContainerAllocator>
 struct GripperState_ {
   typedef GripperState_<ContainerAllocator> Type;
 
   GripperState_()
   : grip()
   , lift()
   {
   }
 
   GripperState_(const ContainerAllocator& _alloc)
   : grip(_alloc)
   , lift(_alloc)
   {
   }
 
   typedef  ::p2os_driver::GripState_<ContainerAllocator>  _grip_type;
    ::p2os_driver::GripState_<ContainerAllocator>  grip;
 
   typedef  ::p2os_driver::LiftState_<ContainerAllocator>  _lift_type;
    ::p2os_driver::LiftState_<ContainerAllocator>  lift;
 
 
 private:
   static const char* __s_getDataType_() { return "p2os_driver/GripperState"; }
 public:
   ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }
 
   ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }
 
 private:
   static const char* __s_getMD5Sum_() { return "300b38b2a4173deb725df02fa70fc70b"; }
 public:
   ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }
 
   ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }
 
 private:
   static const char* __s_getMessageDefinition_() { return "GripState grip\n\
 LiftState lift\n\
 \n\
 ================================================================================\n\
 MSG: p2os_driver/GripState\n\
 # direction -1 is inward, +1 is outward, 0 is stationary\n\
 uint32 state\n\
 int32 dir\n\
 bool inner_beam\n\
 bool outer_beam\n\
 bool left_contact\n\
 bool right_contact\n\
 \n\
 ================================================================================\n\
 MSG: p2os_driver/LiftState\n\
 # direction -1 is downard, +1 is upward, 0 is stationary\n\
 int32 state\n\
 int32 dir\n\
 float32 position\n\
 \n\
 "; }
 public:
   ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }
 
   ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }
 
   ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
   {
     ros::serialization::OStream stream(write_ptr, 1000000000);
     ros::serialization::serialize(stream, grip);
     ros::serialization::serialize(stream, lift);
     return stream.getData();
   }
 
   ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
   {
     ros::serialization::IStream stream(read_ptr, 1000000000);
     ros::serialization::deserialize(stream, grip);
     ros::serialization::deserialize(stream, lift);
     return stream.getData();
   }
 
   ROS_DEPRECATED virtual uint32_t serializationLength() const
   {
     uint32_t size = 0;
     size += ros::serialization::serializationLength(grip);
     size += ros::serialization::serializationLength(lift);
     return size;
   }
 
   typedef boost::shared_ptr< ::p2os_driver::GripperState_<ContainerAllocator> > Ptr;
   typedef boost::shared_ptr< ::p2os_driver::GripperState_<ContainerAllocator>  const> ConstPtr;
   boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
 }; // struct GripperState
 typedef  ::p2os_driver::GripperState_<std::allocator<void> > GripperState;
 
 typedef boost::shared_ptr< ::p2os_driver::GripperState> GripperStatePtr;
 typedef boost::shared_ptr< ::p2os_driver::GripperState const> GripperStateConstPtr;
 
 
 template<typename ContainerAllocator>
 std::ostream& operator<<(std::ostream& s, const  ::p2os_driver::GripperState_<ContainerAllocator> & v)
 {
   ros::message_operations::Printer< ::p2os_driver::GripperState_<ContainerAllocator> >::stream(s, "", v);
   return s;}
 
 } // namespace p2os_driver
 
 namespace ros
 {
 namespace message_traits
 {
 template<class ContainerAllocator> struct IsMessage< ::p2os_driver::GripperState_<ContainerAllocator> > : public TrueType {};
 template<class ContainerAllocator> struct IsMessage< ::p2os_driver::GripperState_<ContainerAllocator>  const> : public TrueType {};
 template<class ContainerAllocator>
 struct MD5Sum< ::p2os_driver::GripperState_<ContainerAllocator> > {
   static const char* value() 
   {
     return "300b38b2a4173deb725df02fa70fc70b";
   }
 
   static const char* value(const  ::p2os_driver::GripperState_<ContainerAllocator> &) { return value(); } 
   static const uint64_t static_value1 = 0x300b38b2a4173debULL;
   static const uint64_t static_value2 = 0x725df02fa70fc70bULL;
 };
 
 template<class ContainerAllocator>
 struct DataType< ::p2os_driver::GripperState_<ContainerAllocator> > {
   static const char* value() 
   {
     return "p2os_driver/GripperState";
   }
 
   static const char* value(const  ::p2os_driver::GripperState_<ContainerAllocator> &) { return value(); } 
 };
 
 template<class ContainerAllocator>
 struct Definition< ::p2os_driver::GripperState_<ContainerAllocator> > {
   static const char* value() 
   {
     return "GripState grip\n\
 LiftState lift\n\
 \n\
 ================================================================================\n\
 MSG: p2os_driver/GripState\n\
 # direction -1 is inward, +1 is outward, 0 is stationary\n\
 uint32 state\n\
 int32 dir\n\
 bool inner_beam\n\
 bool outer_beam\n\
 bool left_contact\n\
 bool right_contact\n\
 \n\
 ================================================================================\n\
 MSG: p2os_driver/LiftState\n\
 # direction -1 is downard, +1 is upward, 0 is stationary\n\
 int32 state\n\
 int32 dir\n\
 float32 position\n\
 \n\
 ";
   }
 
   static const char* value(const  ::p2os_driver::GripperState_<ContainerAllocator> &) { return value(); } 
 };
 
 template<class ContainerAllocator> struct IsFixedSize< ::p2os_driver::GripperState_<ContainerAllocator> > : public TrueType {};
 } // namespace message_traits
 } // namespace ros
 
 namespace ros
 {
 namespace serialization
 {
 
 template<class ContainerAllocator> struct Serializer< ::p2os_driver::GripperState_<ContainerAllocator> >
 {
   template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
   {
     stream.next(m.grip);
     stream.next(m.lift);
   }
 
   ROS_DECLARE_ALLINONE_SERIALIZER;
 }; // struct GripperState_
 } // namespace serialization
 } // namespace ros
 
 namespace ros
 {
 namespace message_operations
 {
 
 template<class ContainerAllocator>
 struct Printer< ::p2os_driver::GripperState_<ContainerAllocator> >
 {
   template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::p2os_driver::GripperState_<ContainerAllocator> & v) 
   {
     s << indent << "grip: ";
 s << std::endl;
     Printer< ::p2os_driver::GripState_<ContainerAllocator> >::stream(s, indent + "  ", v.grip);
     s << indent << "lift: ";
 s << std::endl;
     Printer< ::p2os_driver::LiftState_<ContainerAllocator> >::stream(s, indent + "  ", v.lift);
   }
 };
 
 
 } // namespace message_operations
 } // namespace ros
 
 #endif // P2OS_DRIVER_MESSAGE_GRIPPERSTATE_H
 